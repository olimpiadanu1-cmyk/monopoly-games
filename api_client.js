// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º Monopoly Game
class MonopolyAPI {
    constructor() {
        this.baseURL = 'http://localhost:5000/api';
        this.cache = new Map(); // –ö–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        this.cacheTimeout = 5000; // 5 —Å–µ–∫—É–Ω–¥ –∫–µ—à
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    async checkStatus() {
        try {
            const response = await fetch(`${this.baseURL}/status`);
            const result = await response.json();
            return result.success;
        } catch (error) {
            console.warn('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
            return false;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    async loadData(dataType) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            const cacheKey = dataType;
            const cached = this.cache.get(cacheKey);
            if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log(`üì¶ ${dataType} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞`);
                return cached.data;
            }

            const response = await fetch(`${this.baseURL}/data/${dataType}`);
            const result = await response.json();
            
            if (result.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                this.cache.set(cacheKey, {
                    data: result.data,
                    timestamp: Date.now()
                });
                
                console.log(`‚úÖ ${dataType} –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞`);
                return result.data;
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${dataType}:`, result.error);
                return null;
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${dataType}:`, error.message);
            return null;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    async saveData(dataType, data) {
        try {
            const response = await fetch(`${this.baseURL}/data/${dataType}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                this.cache.set(dataType, {
                    data: data,
                    timestamp: Date.now()
                });
                
                console.log(`‚úÖ ${dataType} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);
                return true;
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${dataType}:`, result.error);
                return false;
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${dataType}:`, error.message);
            return false;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
    async loadAllData() {
        try {
            const response = await fetch(`${this.baseURL}/all-data`);
            const result = await response.json();
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å –∫–µ—à
                for (const [dataType, data] of Object.entries(result.data)) {
                    this.cache.set(dataType, {
                        data: data,
                        timestamp: Date.now()
                    });
                }
                
                console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
                return result.data;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', result.error);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
            return null;
        }
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω');
    }

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
    getCachedData(dataType) {
        const cached = this.cache.get(dataType);
        if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
            return cached.data;
        }
        return null;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
window.monopolyAPI = new MonopolyAPI();

